version: "3.9"

services:
  database:
    image: postgres:14-alpine
    restart: always
    user: root
    container_name: "database"
    volumes:
      - postgres-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=${DB_ROOT_PASSWORD}
    expose:
      - 5432
    networks:
      web:
  backend:
#    image: workplace-reservation4_backend:latest
    build:
      context: ../server
    container_name: backend
    depends_on:
      - database
    restart: always
    environment:
      - JWT_TOKEN_GENERATOR_SECRET_KEY=${ENV_JWT_TOKEN_GENERATOR_SECRET_KEY}
      - DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - PRIMARY_BACKEND_DOMAIN=${PRIMARY_BACKEND_DOMAIN}
    expose:
      - 8080
    labels:
      caddy: ${BACKEND_DOMAINS}
      caddy.reverse.proxy: "{{upstreams 8080}}"
    networks:
      - web
  frontend:
#    image: workplace-reservation4_frontend:latest
    build:
      context: ../webapp
    container_name: frontend
    restart: always
    environment:
      - BACKEND_URL=${PRIMARY_BACKEND_URL}
    expose:
      - 80
    labels:
      caddy: ${FRONTEND_DOMAINS}
      caddy.reverse_proxy: "{{upstreams 80}}"
    networks:
      - web
  caddy:
    image: lucaslorentz/caddy-docker-proxy:alpine
    container_name: caddy
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - /srv/workplace-reservation/data/caddy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      caddy.email: ${ADMIN_EMAIL}
      caddy.log.output: "stdout"
    environment:
      CADDY_INGRESS_NETWORKS: "web"
    networks:
      web:
volumes:
  postgres-db:
networks:
  web:
    external: true